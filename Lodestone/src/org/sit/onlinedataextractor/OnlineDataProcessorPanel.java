/* 
 * Copyright (C) 2021 Grzegorz Bieś, Ernest Bieś
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * Online Data Extractor (Autopsy module), version  1.0
 *
 */
package org.sit.onlinedataextractor;

import java.io.File;
import javax.swing.JFileChooser;
import org.openide.util.NbBundle.Messages;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.autopsy.coreutils.MessageNotifyUtil;

/**
 * Allows examiner to supply information such as credentials for the cloud source.
 */
@Messages({
    "DeviceDataProcessorPanel.moduleErrorMessage.title=Module Error",
    "DeviceDataProcessorPanel.moduleErrorMessage.body=A module caused an error listening to DeviceDataProcessorPanel updates."})
public class OnlineDataProcessorPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private OnlineDataProcessorPanelSettings panelSettings;
    private boolean panelValid;

    public OnlineDataProcessorPanel() {
        initComponents();
        customInit();
        setComponents();
    }

    private void customInit() {        
        this.panelSettings = new OnlineDataProcessorPanelSettings();
        panelValid = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelDataExport = new javax.swing.JPanel();
        jCheckBoxJsonOrHtml = new javax.swing.JCheckBox();
        jCheckBoxRequestExport = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jPanelDataDownload = new javax.swing.JPanel();
        jCheckBoxDefaultLatestExport = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jPanelCredentials = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        jUsernameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jPanelDataExport.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jCheckBoxJsonOrHtml.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxJsonOrHtml, org.openide.util.NbBundle.getMessage(OnlineDataProcessorPanel.class, "OnlineDataProcessorPanel.jCheckBoxJsonOrHtml.text")); // NOI18N
        jCheckBoxJsonOrHtml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxJsonOrHtmlActionPerformed(evt);
            }
        });

        jCheckBoxRequestExport.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxRequestExport, org.openide.util.NbBundle.getMessage(OnlineDataProcessorPanel.class, "OnlineDataProcessorPanel.jCheckBoxRequestExport.text")); // NOI18N
        jCheckBoxRequestExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRequestExportActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(OnlineDataProcessorPanel.class, "OnlineDataProcessorPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout jPanelDataExportLayout = new javax.swing.GroupLayout(jPanelDataExport);
        jPanelDataExport.setLayout(jPanelDataExportLayout);
        jPanelDataExportLayout.setHorizontalGroup(
            jPanelDataExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDataExportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDataExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDataExportLayout.createSequentialGroup()
                        .addComponent(jCheckBoxRequestExport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxJsonOrHtml))
                    .addGroup(jPanelDataExportLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelDataExportLayout.setVerticalGroup(
            jPanelDataExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDataExportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanelDataExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxJsonOrHtml)
                    .addComponent(jCheckBoxRequestExport))
                .addContainerGap())
        );

        jPanelDataDownload.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jCheckBoxDefaultLatestExport.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxDefaultLatestExport, org.openide.util.NbBundle.getMessage(OnlineDataProcessorPanel.class, "OnlineDataProcessorPanel.jCheckBoxDefaultLatestExport.text")); // NOI18N
        jCheckBoxDefaultLatestExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDefaultLatestExportActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(OnlineDataProcessorPanel.class, "OnlineDataProcessorPanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout jPanelDataDownloadLayout = new javax.swing.GroupLayout(jPanelDataDownload);
        jPanelDataDownload.setLayout(jPanelDataDownloadLayout);
        jPanelDataDownloadLayout.setHorizontalGroup(
            jPanelDataDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDataDownloadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDataDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxDefaultLatestExport)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelDataDownloadLayout.setVerticalGroup(
            jPanelDataDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDataDownloadLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jCheckBoxDefaultLatestExport)
                .addContainerGap())
        );

        jPanelCredentials.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(OnlineDataProcessorPanel.class, "OnlineDataProcessorPanel.jLabel3.text")); // NOI18N

        jPasswordField.setText(org.openide.util.NbBundle.getMessage(OnlineDataProcessorPanel.class, "OnlineDataProcessorPanel.jPasswordField.text")); // NOI18N

        jUsernameField.setText(org.openide.util.NbBundle.getMessage(OnlineDataProcessorPanel.class, "OnlineDataProcessorPanel.jUsernameField.text")); // NOI18N
        jUsernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUsernameFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(OnlineDataProcessorPanel.class, "OnlineDataProcessorPanel.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(OnlineDataProcessorPanel.class, "OnlineDataProcessorPanel.jLabel4.text")); // NOI18N

        javax.swing.GroupLayout jPanelCredentialsLayout = new javax.swing.GroupLayout(jPanelCredentials);
        jPanelCredentials.setLayout(jPanelCredentialsLayout);
        jPanelCredentialsLayout.setHorizontalGroup(
            jPanelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCredentialsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCredentialsLayout.createSequentialGroup()
                        .addGroup(jPanelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jUsernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                            .addComponent(jPasswordField)))
                    .addComponent(jLabel3))
                .addGap(22, 22, 22))
        );
        jPanelCredentialsLayout.setVerticalGroup(
            jPanelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCredentialsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCredentialsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelDataDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelDataExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelCredentials, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelDataExport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelDataDownload, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelCredentials, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxDefaultLatestExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDefaultLatestExportActionPerformed
        //panelSettings.setDefaultLatestExport(!panelSettings.isDefaultLatestExport());
    }//GEN-LAST:event_jCheckBoxDefaultLatestExportActionPerformed

    private void jCheckBoxRequestExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRequestExportActionPerformed
        if (jCheckBoxRequestExport.isSelected()) {
            jCheckBoxJsonOrHtml.setEnabled(true);
        } else {
            jCheckBoxJsonOrHtml.setEnabled(false);
        }
        
        //panelSettings.setDataExport(!panelSettings.isDataExport());
    }//GEN-LAST:event_jCheckBoxRequestExportActionPerformed

    private void jCheckBoxJsonOrHtmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxJsonOrHtmlActionPerformed
        //panelSettings.setJsonOrHtml(!panelSettings.isJsonOrHtml());
    }//GEN-LAST:event_jCheckBoxJsonOrHtmlActionPerformed

    private void jUsernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUsernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jUsernameFieldActionPerformed

    private void setComponents() {
        jPanelDataExport.setEnabled(true);
        jPanelDataDownload.setEnabled(true);
        jPanelCredentials.setEnabled(true);
        
        jCheckBoxRequestExport.setEnabled(true);
        jCheckBoxJsonOrHtml.setEnabled(true);
        jCheckBoxDefaultLatestExport.setEnabled(true);
        jUsernameField.setEnabled(true);
        jPasswordField.setEnabled(true);
        
        panelValid = true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxDefaultLatestExport;
    private javax.swing.JCheckBox jCheckBoxJsonOrHtml;
    private javax.swing.JCheckBox jCheckBoxRequestExport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanelCredentials;
    private javax.swing.JPanel jPanelDataDownload;
    private javax.swing.JPanel jPanelDataExport;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JTextField jUsernameField;
    // End of variables declaration//GEN-END:variables

    public boolean validatePanel() {
        return panelValid;
    }

    public void resetPanel() {
        setComponents();
        jUsernameField.setText("");
        jPasswordField.setText("");
    }

    public OnlineDataProcessorPanelSettings getPanelSettings() {
        panelSettings.setDataExport(jCheckBoxRequestExport.isSelected());
        panelSettings.setJsonOrHtml(jCheckBoxJsonOrHtml.isSelected());
        panelSettings.setDefaultLatestExport(jCheckBoxDefaultLatestExport.isSelected());
        
        panelSettings.setUsername(jUsernameField.getText());
        panelSettings.setPassword(jPasswordField.getText());
        return panelSettings;
    }
}
